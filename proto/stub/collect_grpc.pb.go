// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: collect.proto

package stub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectServiceClient is the client API for CollectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectServiceClient interface {
	GetCollectList(ctx context.Context, in *GetCollectListReq, opts ...grpc.CallOption) (*GetCollectListRsp, error)
}

type collectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectServiceClient(cc grpc.ClientConnInterface) CollectServiceClient {
	return &collectServiceClient{cc}
}

func (c *collectServiceClient) GetCollectList(ctx context.Context, in *GetCollectListReq, opts ...grpc.CallOption) (*GetCollectListRsp, error) {
	out := new(GetCollectListRsp)
	err := c.cc.Invoke(ctx, "/stub.CollectService/GetCollectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectServiceServer is the server API for CollectService service.
// All implementations must embed UnimplementedCollectServiceServer
// for forward compatibility
type CollectServiceServer interface {
	GetCollectList(context.Context, *GetCollectListReq) (*GetCollectListRsp, error)
	mustEmbedUnimplementedCollectServiceServer()
}

// UnimplementedCollectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectServiceServer struct {
}

func (UnimplementedCollectServiceServer) GetCollectList(context.Context, *GetCollectListReq) (*GetCollectListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectList not implemented")
}
func (UnimplementedCollectServiceServer) mustEmbedUnimplementedCollectServiceServer() {}

// UnsafeCollectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectServiceServer will
// result in compilation errors.
type UnsafeCollectServiceServer interface {
	mustEmbedUnimplementedCollectServiceServer()
}

func RegisterCollectServiceServer(s grpc.ServiceRegistrar, srv CollectServiceServer) {
	s.RegisterService(&CollectService_ServiceDesc, srv)
}

func _CollectService_GetCollectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).GetCollectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stub.CollectService/GetCollectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).GetCollectList(ctx, req.(*GetCollectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectService_ServiceDesc is the grpc.ServiceDesc for CollectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stub.CollectService",
	HandlerType: (*CollectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollectList",
			Handler:    _CollectService_GetCollectList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collect.proto",
}
